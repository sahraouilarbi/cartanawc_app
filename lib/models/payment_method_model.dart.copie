class PaymentGateways {
  PaymentGateways({
    this.id,
    this.title,
    this.description,
    this.order,
    this.enabled,
    this.methodTitle,
    this.methodDescription,
    this.methodSupports,
    this.settings,
    this.logo,
    this.route,
    this.onTap,
    this.isRouteRedirect,
  });
  String id;
  String title;
  String description;
  int order;
  bool enabled;
  String methodTitle;
  String methodDescription;
  List<String> methodSupports;
  Map<String, PaymentGatewaySettings> settings;
  String logo;
  String route;
  Function onTap;
  bool isRouteRedirect;
  PaymentGateways.fromJson(Map<String, dynamic> json) {
    id = json['id'] as String;
    title = json['title'] as String;
    description = json['description'] as String;
    order = json['order'] as int;
    enabled = json['enable'] as bool;
    methodTitle = json['method_title'] as String;
    methodDescription = json['method_description'] as String;
    if (json['method_supports'] != null) {
      methodSupports = <String>[];
      json['method_supports'].forEach((v) => methodSupports.add(v as String));
    }
    if (json['settings'] != null) {
      settings = Map.from(json['settings'].map((k, v) =>
              MapEntry<String, dynamic>(
                  k as String, v.fromJson(v as Map<String, dynamic>)))
          as Map<String, PaymentGatewaySettings>);
      print(settings);
    }
  }
}

class PaymentGatewaySettings {
  String id;
  String label;
  String description;
  String type;
  String value;
  String paymentGatewaySettingDefault;
  String tip;
  String placeholder;
  PaymentGatewaySettings.fromJson(Map<String, dynamic> json) {
    print('id : ${json['id']}');
    print('label : ${json['label']}');
    print('description : ${json['description']}');
    print('type : ${json['type : ']}');
    print('value : ${json['value ']}');
    print('default : ${json['default']}');
    print('tip : ${json['tip']}');
    print('placeholder : ${json['placeholder']}');
    id = json['id'] as String;
    label = json['label'] as String;
    description = json['description'] as String;
    type = json['type'] as String;
    value = json['value'] as String;
    paymentGatewaySettingDefault = json['default'] as String;
    tip = json['tip'] as String;
    placeholder = json['placeholder'] as String;
  }
}

class PaymentMethodList {
  List<PaymentGateways> _paymentList;
  List<PaymentGateways> _cashList;
  PaymentMethodList() {
    _cashList = [
      PaymentGateways(
        id: 'cod',
        title: 'Paiement à la livraison',
        description: 'Payez en espèce à la livraison',
        logo: 'assets/images/cash.png',
        route: '/OrderSuccess',
        onTap: () {},
        isRouteRedirect: false,
      ),
      PaymentGateways(
        id: 'bacs',
        title: 'Virement bancaire',
        description:
            "Effectuez votre paiement directement sur notre compte bancaire. Veuillez utiliser votre ID de commande comme référence de paiement. Votre commande ne sera pas expédiée tant que les fonds n'auront pas été versés sur notre compte.",
        logo: 'assets/images/cash.png',
        route: '/OrderSuccess',
        onTap: () {},
        isRouteRedirect: false,
      ),
      PaymentGateways(
        id: 'cheque',
        title: 'Paiement par chèque',
        description:
            "Merci d'envoyer un chèque libelé au nom de l'entreprise, à l'adresse de notre entreprise",
        logo: 'assets/images/cash.png',
        route: '/OrderSuccess',
        onTap: () {},
        isRouteRedirect: false,
      ),
    ];
    _paymentList = [
      PaymentGateways(
        id: 'paypal',
        title: 'Paypal',
        description: 'Payez via Paypal',
        logo: 'assets/images/paypal.png',
        route: '/Paypal',
        onTap: () {},
        isRouteRedirect: true,
      ),
    ];
  }

  List<PaymentGateways> get cashList => _cashList;
  List<PaymentGateways> get paymentList => _paymentList;
}
